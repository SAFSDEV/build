
<!-- This build XML is supposed to provide common target etc. -->

<project name="shared_target" basedir=".">

	<!-- Property 'Private.FTPServer.isConnected' is used                                           -->
	<!-- to test if the private FTP server is reachable.                                            -->
	<!-- Lei: Comment this global property setting:                                                  -->
	<!-- If the private FTP server is not reachable, this will show message "Unknown host: xxxx"    -->
	<!-- and this message will show every time we call a target, it is annoying                     -->
	<!-- Moved this definition to target 'prepare.download'/'javac.compile'                         -->
	<!--condition property="Private.FTPServer.isConnected">
		<isreachable host="${private.ftpserver}" timeout="10"/>
	</condition-->
	
	<!-- Property 'Eclipse.is.Mars' is used to tell us if -->
	<!-- the embedded Eclipse is Mars or not.             -->
	<condition property="Eclipse.is.Mars">
		<equals arg1="${ECLIPSE_WINDOWS}" arg2="MARS_WIN64.ZIP" />
	</condition>
	
	<!-- Prepare for server connection  -->
	<!-- Currently, we set the server-name, user and password. -->
	<!-- We have 2 FTP servers, one is private and the other is public -->
	<!-- We prefer to use the private FTP server if it is connectable -->
	
	<!-- We used ant <ftp> to download files, now we use ant <get> to download files. -->
	<!-- Concern: I DO NOT know if the ftp user/password could work with ant <get>    -->
	<!-- Lei: ant <get> cannot work with public ftp server ftp.cjncreations.com, it fails with 
	     FtpLoginException: Invalid username/password, even the user/password are correct;
	     ant <ftp> cannot work with public ftp server neither, it can etablish the connection,
	     but it downloads 0 files;
	     It turns out that this problem is caused by 'FTP active mode': FTP server tries to 
	     connect client machine when transferring data, but client machine is behind a firewall
	     and does not allow this connection.
	     "FTP passive mode" can work with client machine behind a firewall, it uses the connection
	     etablished when authenticating, the performance is not as good as 'active mode'.
	     Ant <ftp> provide an attribute 'passive', set it to "yes" to let ftp work in passive mode.
	-->
	<target name="prepare.download">
		<condition property="Private.FTPServer.isConnected">
			<isreachable host="${private.ftpserver}" timeout="10"/>
		</condition>
		<!-- set 'server', 'userid' and 'passwd' for FTP Server, using ant <ftp> to download resources 
		     <ftp action="get" verbose="true" passive="yes" remotedir="${safsdev.win.java}" server="$server}" userid="$userid}" password="$passwd}" preservelastmodified="true" >
               <fileset dir="${safsdist}/jre" includes="${JRE_WINDOWS}" /></ftp>
		-->
		<if>
			<isset property="Private.FTPServer.isConnected" />
			<then>
				<property name="server"  value="${private.ftpserver}" />
				<property name="userid"  value="${private.ftpuserid}" />
				<property name="passwd"  value="${private.ftppasswd}" />
			</then>
			<else>
				<property name="server"  value="${public.ftpserver}" />
				<property name="userid"  value="${public.ftpuserid}" />
				<property name="passwd"  value="${public.ftppasswd}" />
			</else>
		</if>
		<!-- set 'server', 'userid' and 'passwd' for FTP-Server/Http-Server, using ant <get> to download resources 
		     <get dest="${safsdist}/jre" username="${userid}" password="${passwd}" usetimestamp="true">
               <url url="${server}${safsdev.win.java}/${JRE_WINDOWS}"/></get>
		-->
		<!--if>
			<isset property="Private.FTPServer.isConnected" />
			<then>
				<property name="server"  value="ftp://${private.ftpserver}" />
				<property name="userid"  value="${private.ftpuserid}" />
				<property name="passwd"  value="${private.ftppasswd}" />
			</then>
			<else>
				<property name="server"  value="http://${public.httpserver}" />
				<property name="userid"  value="" />
				<property name="passwd"  value="" />
			</else>
		</if-->
		<echo>we are using '${server}' as download server.</echo>
		<!-- echo>userid is ${userid}</echo-->
		<!-- echo>passwd is ${passwd}</echo-->
	</target>
	
   	<!-- Start a new Remote-Desktop-Connection to the testing machine         -->
    <!-- This task will                                                       -->
    <!-- 1. Kill the old connection if it exists                              -->
    <!-- 2. Create a new connection                                           -->
    <!-- 3. Test if the new connection is avaiable                            -->
    <target name="spawn.rdc">
    	<echo>Start a new Remote-Desktop to machine ${env.TestingMachine} from machine ${env.COMPUTERNAME}</echo>
    	<echo>Kill any existing connection ...</echo>
        <exec executable="taskkill">
        	<arg value="/F"/>
        	<arg value="/FI"/>
        	<arg value="IMAGENAME eq mstsc.exe"/>
        	<arg value="/FI"/>
        	<arg value="WINDOWTITLE eq ${env.TestingMachine}*"/>
        </exec>
        		
    	<echo>Start a NEW process to handle the remote-desktop-connection to the testing machine.</echo>
	    <!-- This will avoid the warning "file descriptor leak", described in                      -->
	    <!-- https://wiki.jenkins-ci.org/display/JENKINS/Spawning+processes+from+build             -->
        <exec executable="cscript.exe">
            <env key="ANTRUN_TITLE" value="Connecting Testing machine."/>
            <env key="ANTRUN_OUTPUT" value="safs.rdc.${env.TestingMachine}.log"/>
            <arg value="//NoLogo"/>
            <arg value="antExecAsync.vbs"/>
            <arg value="mstsc.exe"/>
            <arg value="/v:${env.TestingMachine}"/>
        </exec>
    	
    	<echo>Waiting for 30s until mstsc's remote desktop presents</echo>
    	<sleep seconds="30"/>
    	<echo>Check the connection's availibility</echo>
        <var name="exec.rc" unset="true"/>
        <var name="exec.output" unset="true"/>
        <var name="exec.error" unset="true"/>
        <exec executable="tasklist"
              resultproperty="exec.rc"
              outputproperty="exec.output"
              errorproperty="exec.error">
          <arg value="/V"/>
          <arg value="/FI"/>
          <arg value="IMAGENAME eq mstsc.exe"/>
          <arg value="/FI"/>
          <arg value="WINDOWTITLE eq ${env.TestingMachine}*"/>
          <arg value="/NH"/>
        </exec>
        <echo>${exec.output}</echo>
        <fail message="Failed to Remote-Desktop to machine '${env.TestingMachine}' with error code: ${exec.rc}">
          <condition>
            <or>
                <not><equals arg1="${exec.rc}" arg2="0"/></not>
                <not><contains string="${exec.output}" substring="${env.TestingMachine}"/></not>
            </or>
          </condition>
        </fail>
    </target>
	
    <!-- Purpose: Copy the files from playpen to the folder source\common of current workspace          -->
    <!--          So that we can make jar files with the playpen's source code for user's testing       -->
    <target name="copy.playpen">
        <property name="current.dir" location="." />
        <if>
            <isset property="env.safs.playpen.location" />
            <then>
                <echo>Copying files from playpen ${env.safs.playpen.location} to ${current.dir}/${safssource}</echo>
                <copy todir="${safssource}"  preservelastmodified="true" overwrite="true">
                    <fileset dir="${env.safs.playpen.location}" />
                </copy>
            </then>
        	<else>
        		<echo>Ignoring copy.playpen task.</echo>
        	</else>
        </if>
    </target>

</project>